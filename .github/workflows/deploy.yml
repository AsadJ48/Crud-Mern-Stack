name: CD - Deploy to Azure VM

on:
  workflow_dispatch:  # ‚¨ÖÔ∏è This adds the manual "Run workflow" button

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up SSH key
        run: |
          set -e
          mkdir -p ~/.ssh
          printf "%s" "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          if [ -z "${{ secrets.SSH_HOST }}" ]; then
            echo "‚ùå SSH_HOST secret is empty. Set it in Settings ‚Üí Secrets ‚Üí Actions."
            exit 1
          fi

      - name: Show host & user (diagnostic)
        run: |
          echo "HOST='${{ secrets.SSH_HOST }}'"
          echo "USER='${{ secrets.SSH_USERNAME }}'"
          echo "KEY first line:"
          head -n 1 ~/.ssh/id_rsa || true
          echo "KEY last line:"
          tail -n 1 ~/.ssh/id_rsa || true

      - name: Test SSH connectivity (verbose)
        run: |
          ssh -vvv -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa \
            ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "echo '‚úÖ SSH OK on runner'"

      - name: Deploy to Azure VM
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa \
            ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} << 'EOF'
              set -e

              REPO_DIR="$HOME/Crud-Mern-Stack"
              REPO_URL="https://github.com/AsadJ48/Crud-Mern-Stack.git"

              if [ ! -d "$REPO_DIR/.git" ]; then
                echo "üì• Cloning repository..."
                git clone "$REPO_URL" "$REPO_DIR"
              fi

              cd "$REPO_DIR"

              echo "üîß Ensuring correct remote..."
              git remote set-url origin "$REPO_URL"

              echo "üîÑ Force syncing working tree..."
              git fetch origin
              git reset --hard origin/main
              git clean -fd

              echo "üì¶ Backend: installing dependencies..."
              cd backend
              npm install

              ENTRY="index.js"
              if [ ! -f "$ENTRY" ]; then
                if [ -f "server.js" ]; then ENTRY="server.js"; else echo "‚ùå No entry file found"; exit 1; fi
              fi

              echo "üöÄ Restarting backend..."
              pkill node || true
              nohup node "$ENTRY" > server.log 2>&1 &

              echo "üåê Building frontend..."
              cd ../frontend
              npm install
              npm run build

              echo "‚úÖ Deployment complete."
              sleep 10
          EOF
